"use strict";export function TestsOf(s="Tests of :",e,t={cmd:{tabbedCMDline:!0}}){let r=0,o={};const n=new l({tabbedCMDline:!0});n.noteLog(s);for(let a in e){let[u,c]=e[a];try{u(),o[a]=n.cLog(a,c,t?.cmd)}catch(i){r++,i instanceof Error&&(o[a]=n.fLog(a,c),i.cause==!1&&(console.log(i.message),console.error(i.stack)))}}return o}export function FastTestOf(s){const e=new l({tabbedCMDline:!0});try{for(let t in s){let[r,o]=s[t];try{r(),e.cLog(t,o)}catch(n){if(n instanceof Error)throw new Error(n.message,{cause:t})}}}catch(t){t instanceof Error&&(e.fLog(t.cause," "),console.log(t.message),console.error(t.stack))}}export function assert(s,e=!1){if(!s)throw new Error("assert(): FAILED",{cause:e})}export function assertEquals(s,e,t=!1){const r=s?.constructor?.name==="Object"?JSON.stringify(s):s,o=e?.constructor?.name==="Object"?JSON.stringify(e):e;if(o!=r)throw new Error(`assertEquals() "${r}" != "${o}"`,{cause:t})}export function assertStrictEquals(s,e,t=!1){if(e!==s)throw new Error('assertStrictEquals() "'+e+'" !== "'+s+'"',{cause:t})}class l{preStr="";endSection="";constructor(e){e.tabbedCMDline&&(this.preStr+="\u251C"),e.tabbedCMDline&&(this.endSection+="\u2514")}cLog(e,t,r){return console.log(`${this.preStr}\x1B[1;34m${e} :\x1B[1;32m   OK   \x1B[0m ${t}`),e+":   OK   "+t}fLog(e,t,r){return console.log(`${this.preStr}\x1B[1;33m${e} :\x1B[1;31m FAILED \x1B[0m ${t}`),e+": FAILED "+t}noteLog(e,t){console.log(`\x1B[1;35m${e} \x1B[0m`)}}
